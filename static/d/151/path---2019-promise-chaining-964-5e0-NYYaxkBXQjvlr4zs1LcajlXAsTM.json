{"data":{"site":{"siteMetadata":{"title":"vcolavin","author":"Vincent Colavin"}},"markdownRemark":{"id":"dabb0078-9535-5938-90ec-6bd2632377d6","excerpt":"Here’s a neat technique I learned while building  The Nature of the Beast , and was able to use during a code interview. I think it’s nifty as hell and the…","html":"<p>Here’s a neat technique I learned while building <a href=\"https://github.com/vcolavin/nature-of-the-beast\">The Nature of the Beast</a>, and was able to use during a code interview. I think it’s nifty as hell and the interviewer did too. I think I first found this on Stack Overflow.</p>\n<p>In NotB, descriptions are read out loud using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis\">browser speech synthesis API</a>. Each description is a an array of strings. I needed the descriptions to be read sequentially, with no overlap. I knew I wanted to use promises in order to take advantage of chaining, so the core function would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">utter</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> utterance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechSynthesisUtterance</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twindow<span class=\"token punctuation\">.</span>speechSynthesis<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>utterance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tutterance<span class=\"token punctuation\">.</span>onend <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Just using <code class=\"language-text\">utter</code> naïvely, though, yields something like this, which can’t work for an arbitrary list of strings:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">utter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first description'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">utter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">utter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'third description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The full solution hinges on <code class=\"language-text\">reducing</code> all the functions together. I’ll show you a simpler example, which the interviewer asked:</p>\n<h2>The interview question</h2>\n<p>Take an array of numbers, e.g. <code class=\"language-text\">[1, 4, 10, 3]</code>, and print them out in order with one second delay between them.</p>\n<p>He may have been looking for something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nmyArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\twindow<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What I</p>","frontmatter":{"title":"Chaing Arbitrary Promises in JavaScript","date":"April 17, 2019","description":"A neat lil JS trick"}}},"pageContext":{"slug":"/2019/promise-chaining/","previous":{"fields":{"slug":"/2019/nature-of-the-beast/"},"frontmatter":{"title":"Nature of the Beast"}},"next":null}}