{"data":{"site":{"siteMetadata":{"title":"vcolavin","author":"Vincent Colavin"}},"markdownRemark":{"id":"dabb0078-9535-5938-90ec-6bd2632377d6","excerpt":"Here’s a neat trick I learned while building  The Nature of the Beast , and was able to apply in a code interview. I think it’s nifty as hell and the…","html":"<p>Here’s a neat trick I learned while building <a href=\"https://github.com/vcolavin/nature-of-the-beast\">The Nature of the Beast</a>, and was able to apply in a code interview. I think it’s nifty as hell and the interviewer did too. I think I first found this on Stack Overflow.</p>\n<h2>The Interview Question</h2>\n<p>Take an array of numbers, e.g. <code class=\"language-text\">[1, 4, 10, 3]</code>, and print them out in order with one second delay between them.</p>\n<p>The interviewer may have been looking for something like this, which immediately sets multiple timeouts with increasing wait periods based on the index:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nmyArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\twindow<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What I did instead was use my nifty promise trick, starting with this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">logThenWait</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\twindow<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">logThenWait</code> function just accepts a number, prints it, and returns a promise which resolves in one second. If you’re comfortable with JS promises, it is not unusual.</p>\n<p>I brought it together with this <code class=\"language-text\">reduce</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> memo<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">logThenWait</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It’s fairly dense chunk of code that took me some time to get used to. The principle of <code class=\"language-text\">reduce</code> is that it takes a list of things and turns into a single thing. In this case, we’re taking a list of numbers and turning them into a single promise. It’s a little weird because that single promise is the last in a chain made up of promises for each value in the initial array.</p>\n<p>We start with <code class=\"language-text\">Promise.resolve(null)</code>, which is passed into the reducer function. We create a new promise using <code class=\"language-text\">logThenWait</code> and return it. That new promise then gets passed to the reducer as the memo, and the process repeats with each item in the array.</p>\n<p>The result is a promise which prints each item one second apart. The main advantage it has over the basic <code class=\"language-text\">setTimeout</code> technique is that the result of the reduce is itself thenable, so we know when its done. This is pretty useful in real-world UI work. Something like…</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> writerPromise <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* see code above */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwriterPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'all done!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Using promises with the browser speech API</h2>\n<p>So in NotB, descriptions are read out loud using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis\">browser speech synthesis API</a>. Each description is an array of strings. I needed the descriptions to be read out loud, one after the other. I knew I wanted to use promises in order to take advantage of chaining. The core function would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">utter</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> utterance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechSynthesisUtterance</span><span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twindow<span class=\"token punctuation\">.</span>speechSynthesis<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>utterance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tutterance<span class=\"token punctuation\">.</span>onend <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And just like above, I reduced a list of strings to a single promise. While descriptions are being read, the user can’t interact with the screen, so I take advantage of the promise resolution to unlock the screen.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> descriptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">'the ghoul is looking at you'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"it's a very spooky ghoul\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"don't get too freaked out please\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> descriptionPromise <span class=\"token operator\">=</span> descriptions<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> memo<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">utter</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndescriptionPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> interactive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"Chaining Arbitrary Promises in JavaScript","date":"April 17, 2019","description":"A neat lil JS trick"}}},"pageContext":{"slug":"/2019/promise-chaining/","previous":{"fields":{"slug":"/2019/nature-of-the-beast/"},"frontmatter":{"title":"Nature of the Beast"}},"next":null}}